<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import bing.res.ResVO;
			import bing.utils.ContainerUtil;
			
			import ghostcat.fileformat.swf.SWFDecoder;
			import ghostcat.fileformat.swf.tag.SymbolClassTag;
			
			import local.ele.BitmapMovieClip;
			import local.utils.ResourceUtil;
			
			import mx.collections.ArrayCollection;
			
			import spark.events.IndexChangeEvent;
			
			private var file:File ;
			private var swfDecoder:SWFDecoder ; 
			private var classListCollection:ArrayCollection ; //链接名列表
			private var animBmpMC:BitmapMovieClip ;
			private var effectBmpMC:BitmapMovieClip ;
			
			private function init():void{
				uiContainer.graphics.lineStyle(2);
				uiContainer.graphics.moveTo(-50,0);
				uiContainer.graphics.lineTo(50,0);
				uiContainer.graphics.moveTo(0,-25);
				uiContainer.graphics.lineTo(0,25);
				this.addEventListener(Event.ENTER_FRAME , updateHandler );
			}
			
			
			//---------------直接拖放------------------------------------
			protected function cavBuilding_nativeDragEnterHandler(event:NativeDragEvent):void
			{
				NativeDragManager.dropAction = NativeDragActions.COPY ; 
				NativeDragManager.acceptDragDrop(event.target as InteractiveObject) ;
			}
			
			protected function cavBuilding_nativeDragDropHandler(event:NativeDragEvent):void
			{
				dispose();
				file =  event.clipboard.getData( event.clipboard.formats[0])[0] as File;
				if(file.extension.toLowerCase()=="swf"){
					ResourceUtil.instance.addEventListener( file.name , loadedHandler );
					ResourceUtil.instance.loadRes( new ResVO(file.name,file.url) );
				}
			}
			
			private function loadedHandler( e:Event ):void
			{
				e.stopPropagation() ;
				var resVO:ResVO = ResourceUtil.instance.getResVOByResId( file.name );
				if(resVO){
					var bytes:ByteArray = resVO.userData as ByteArray ;
					bytes.position = 0 ;
					//破解swf
					swfDecoder = new SWFDecoder(bytes);
					var arr:Array = swfDecoder.getTags(SymbolClassTag)[0].symbolClasses ;
					arr.sort();
					classListCollection = new ArrayCollection( arr );
					show();
				}
			}
			
			protected function show():void
			{
				dispose(false);
				if(classListCollection.length==0) return ;
				
				var clsName:String=  classListCollection[0] ;
				var mc:MovieClip = ResourceUtil.instance.getInstanceByClassName( file.name,clsName) as MovieClip;
				if(mc) 
					uiContainer.addChild( mc );
				mc = ResourceUtil.instance.getInstanceByClassName( file.name,clsName+"_Anim") as MovieClip; //默认动画
				if(mc){
					animBmpMC = new BitmapMovieClip( mc );
					uiContainer.addChild( animBmpMC );
					animBmpMC.visible=false;
				}	
				mc = ResourceUtil.instance.getInstanceByClassName( file.name,clsName+"_Effect") as MovieClip; //特效
				if(mc){
					effectBmpMC = new BitmapMovieClip( mc );
					uiContainer.addChild( effectBmpMC );
					effectBmpMC.visible=false;
				}
			}
			
			private function updateHandler( e:Event ):void
			{
				if(animBmpMC && animBmpMC.update()){
					animBmpMC.x = animBmpMC.getBound().x ;
					animBmpMC.y = animBmpMC.getBound().y ;
					animBmpMC.visible=true;
				}
				if(effectBmpMC && effectBmpMC.update()){
					effectBmpMC.x = effectBmpMC.getBound().x ;
					effectBmpMC.y = effectBmpMC.getBound().y ;
					effectBmpMC.visible=true;
				}
			}
			
			private function dispose( flag:Boolean= true ):void
			{
				if(animBmpMC) {
					animBmpMC.dispose(true);
					animBmpMC = null ;
				}
				if(effectBmpMC) {
					effectBmpMC.dispose(true);
					effectBmpMC = null ;
				}
				ContainerUtil.removeChildren( uiContainer );
				if(file && flag){
					ResourceUtil.instance.deleteRes( file.name );
				}
			}
		]]>
	</fx:Script>
	
	<s:BorderContainer width="100%" height="100%" backgroundColor="#E0E8E0" mouseChildren="false"
					   nativeDragEnter="cavBuilding_nativeDragEnterHandler(event)" nativeDragDrop="cavBuilding_nativeDragDropHandler(event)">
		<mx:UIComponent id="uiContainer" horizontalCenter="0" verticalCenter="0" creationComplete="init()"/>
	</s:BorderContainer>
</s:Group>
