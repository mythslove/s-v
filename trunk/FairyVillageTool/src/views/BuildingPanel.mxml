<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:components="views.components.*"
		 width="100%" height="100%" addedToStage="init();">
	<s:layout>
		<s:HorizontalLayout gap="5"/>
	</s:layout>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import bing.animation.ActionVO;
			import bing.animation.AnimationBitmap;
			
			private var _loader:Loader ;
			private var _bmd:BitmapData;
			private var _animation:AnimationBitmap;
			
			private function init():void
			{
				stage.addEventListener(Event.RESIZE , onResizeHandler );
				cood.graphics.lineStyle(1,0xff0000);
				cood.graphics.moveTo(-9,0);
				cood.graphics.lineTo(9,0);
				cood.graphics.moveTo(0,9);
				cood.graphics.lineTo(0,-9);
				onResizeHandler(null);
				addEventListener(Event.ENTER_FRAME , update );
			}
			
			private function update( e:Event) :void
			{
				if(_animation && container.numChildren>0){
					_animation.playAction("effect");
					var sp:Sprite = container.getChildAt(0) as  Sprite;
					if(sp && sp.getChildAt(0) && sp.getChildAt(0) is Bitmap){
						(sp.getChildAt(0) as Bitmap).bitmapData = _animation.animationBmd ;
					}
				}
			}
			
			private function onResizeHandler( e:Event ):void
			{
				container.x = buildingContainer.width>>1;
				container.y = buildingContainer.height>>2;
				gameGrid.x = container.x;
				gameGrid.y = container.y;
				cood.x = container.x;
				cood.y = container.y;
			}
			
			//直接拖放
			protected function container_nativeDragEnterHandler(event:NativeDragEvent):void
			{
				NativeDragManager.dropAction = NativeDragActions.COPY ; 
				NativeDragManager.acceptDragDrop(event.target as InteractiveObject);
			}
			
			protected function container_nativeDragDropHandler(event:NativeDragEvent):void
			{
				clearClickHandler();
				
				var file:File =  event.clipboard.getData( event.clipboard.formats[0])[0] as File;
				if(file.extension.toLowerCase()!="png") return ;
				
				lblName.text = file.name;
				if(_loader){
					_loader.contentLoaderInfo.removeEventListener( Event.COMPLETE , loadedHandler );
					_loader.unloadAndStop();
				}
				_loader = new Loader();
				_loader.contentLoaderInfo.addEventListener( Event.COMPLETE , loadedHandler );
				_loader.load( new URLRequest(file.url));
			}
			
			private function loadedHandler( e:Event ):void
			{
				_loader.contentLoaderInfo.removeEventListener( Event.COMPLETE , loadedHandler );
				while(container.numChildren>0){
					(container.getChildAt(0) as Sprite).stopDrag();
					container.getChildAt(0).removeEventListener( MouseEvent.MOUSE_DOWN , mouseHandler );
					container.getChildAt(0).removeEventListener( MouseEvent.MOUSE_UP , mouseHandler );
					container.getChildAt(0).removeEventListener( MouseEvent.MOUSE_MOVE , mouseHandler);
					container.removeChildAt(0);
				}
				var bmp:Bitmap = _loader.content as Bitmap;
				_bmd = bmp.bitmapData.clone();
				var sprite:Sprite = new Sprite();
				sprite.addChild(bmp);
				container.addChild( sprite);
				sprite.addEventListener( MouseEvent.MOUSE_DOWN , mouseHandler , false ,0 , true  );
				sprite.addEventListener( MouseEvent.MOUSE_UP , mouseHandler , false ,0 , true  );
				sprite.addEventListener( MouseEvent.MOUSE_MOVE , mouseHandler , false ,0 , true  );
			}
			
			private function mouseHandler( e:MouseEvent ):void
			{
				switch( e.type )
				{
					case MouseEvent.MOUSE_DOWN:
						e.target.startDrag(false);
						break;
					case MouseEvent.MOUSE_UP:
						e.target.stopDrag();
						break;
					case MouseEvent.MOUSE_MOVE:
						if(e.buttonDown){
							txtOffsetX.text = e.target.x +"";
							txtOffsetY.text = e.target.y +"";
						}
						break;
				}
			}
			
			private function offsetOkClickHandler():void
			{
				if(container.numChildren>0){
					var offsetX:int = int(txtOffsetX.text) ;
					var offsetY:int = int(txtOffsetY.text) ;
					container.getChildAt(0).x= offsetX;
					container.getChildAt(0).y= offsetY;
					container.getChildAt(0).scaleX = Number(txtScale.text);
					container.getChildAt(0).scaleY = Number(txtScale.text);
				}
			}
			
			private function aniButtonClickHandler():void
			{
				var row:int = int(txtRow.text) ;
				var col:int = int(txtCol.text) ;
				var frames:int = int(txtFrames.text) ;
				var rate:int = int(txtRate.text) ;
				if(row<0 || col<0 || frames<0) return ;
				if(rate<0) {
					rate=3;
					txtRate.text = rate+"";
				}
				//创建动画
				if(_animation){
					_animation.dispose();
				}
				var bmds:Vector.<BitmapData> = AnimationBitmap.splitBitmap( _bmd , row,col,frames );
				_animation = new AnimationBitmap(bmds,Vector.<ActionVO>([new ActionVO("effect",frames)]) , rate );
			}
			
			
			private function clearClickHandler():void
			{
				if(_bmd){
					_bmd.dispose();
					_bmd = null ;
				}
				if(_animation){
					_animation.dispose();
					_animation = null ;
				}
				while(container.numChildren>0){
					(container.getChildAt(0) as Sprite).stopDrag();
					container.getChildAt(0).removeEventListener( MouseEvent.MOUSE_DOWN , mouseHandler );
					container.getChildAt(0).removeEventListener( MouseEvent.MOUSE_UP , mouseHandler );
					container.getChildAt(0).removeEventListener( MouseEvent.MOUSE_MOVE , mouseHandler);
					container.removeChildAt(0);
				}
			}
		]]>
	</fx:Script>
	<s:BorderContainer id="buildingContainer" width="100%" height="100%" backgroundColor="#49842D" borderColor="#BABABA"  
					   nativeDragEnter="container_nativeDragEnterHandler(event)" nativeDragDrop="container_nativeDragDropHandler(event)">
		<components:GameGrid id="gameGrid" x="89" y="452" mouseChildren="false" mouseEnabled="false"/>
		<mx:UIComponent id="container" mouseEnabled="false"/>
		<mx:UIComponent id="cood" mouseChildren="false" mouseEnabled="false"/>
	</s:BorderContainer>
	<s:BorderContainer width="250" height="100%" borderColor="#CACACA">
		<s:Label x="24" y="251" fontWeight="bold" text="行(Row)"/>
		<s:Label x="9" y="62" fontWeight="bold" text="OffsetX "/>
		<s:Label x="10" y="36" fontWeight="bold" text="Scale"/>
		<s:Label x="17" y="11" fontWeight="bold" text="Name"/>
		<s:Label x="10" y="90" fontWeight="bold" text="OffsetY"/>
		<s:TextInput id="txtOffsetX" x="79" y="57" text="0"/>
		<s:TextInput id="txtOffsetY" x="79" y="85" text="0"/>
		<s:Label id="lblName" x="80" y="26" text="  "/>
		<s:Label x="6" y="219" color="#099016" text="动画(Animation)"/>
		<s:Label x="26" y="283" fontWeight="bold" text=" 列(Col)"/>
		<s:Label x="7.5" y="315" fontWeight="bold" text=" 帧数(Frames)"/>
		<s:TextInput id="txtFrames" x="102" y="311" width="105" text="0"/>
		<s:Label x="16" y="346" fontWeight="bold" text=" 帧频(Rate)"/>
		<s:TextInput id="txtRate" x="102" y="341" width="105" text="0"/>
		<s:TextInput id="txtRow" x="103" y="249" width="104" text="0"/>
		<s:TextInput id="txtCol" x="102" y="279" width="105" text="0"/>
		<s:Button x="28" y="388" width="164" height="29" label="Animation OK" click="aniButtonClickHandler()"/>
		<s:Button x="28" y="116" width="164" height="29" label="Offset OK" click="offsetOkClickHandler();"/>
		<s:Label x="4" y="167" color="#038C00" fontWeight="normal" text="网格类型(GridType)"/>
		<s:DropDownList id="gridTypeList" x="95" y="187" labelField="label" change="gameGrid.update(gridTypeList.selectedIndex+1);">
			<s:dataProvider>
				<s:ArrayCollection>
					<fx:Object label="1*1" value="1" />
					<fx:Object label="2*2" value="2" />
					<fx:Object label="3*3" value="3" />
					<fx:Object label="4*4" value="4" />
				</s:ArrayCollection>
			</s:dataProvider>
		</s:DropDownList>
		<s:Button x="10" y="468" width="218" height="45" label="清空(Clear)" click="clearClickHandler()"/>
		<s:TextInput id="txtScale" x="78" y="29" text="1"/>
	</s:BorderContainer>
</s:Group>
