<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx" creationComplete="init()"
		 xmlns:views="tool.views.*"  width="100%" height="100%">
	<s:layout>
		<s:HorizontalLayout/>
	</s:layout>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import bing.iso.Rhombus;
			
			import mx.managers.PopUpManager;
			import mx.utils.StringUtil;
			
			import tool.comm.Setting;
			import tool.local.vos.RoadResVO;
			import tool.utils.RoadFileUtil;
			import tool.views.components.RoadComponent;
			private var directions:Array = ["","_L","_R","_U","_B","_M","_LU","_LB","_RU","_RB","_LU_M","_LB_M","_RU_M","_RB_M","_LM","_RM"];
			//当前选择到的
			public var currentRoad:RoadComponent;
			
			private function init():void
			{
				var len:int = directions.length ;
				var row:int , col:int ;
				var rho:Rhombus ;
				var road:RoadComponent ;
				var tf:TextField ;
				for( var i:int = 0 ; i <len ; ++i ){
					rho = new Rhombus( Setting.SIZE , 0xffffff );
					if(i==len*0.25 || i==len*0.5 || i==len*0.75){
						++row ; col = 0 ;
					}
					rho.x = col* Setting.SIZE*3 ;
					rho.y = row*Setting.SIZE*2 ;
					bg.addChild( rho);
					
					road = new RoadComponent();
					road.x = rho.x ;
					road.y = rho.y ;
					container.addChild( road);
					
					tf = new TextField();
					tf.textColor = 0xffffff;
					tf.text = directions[i];
					tf.x = rho.x ;
					tf.y = rho.y+rho.height;
					bg.addChild(tf);
					
					++col ;
				}
				
				container.addEventListener(MouseEvent.MOUSE_DOWN , onMouseHandler );
				stage.addEventListener(KeyboardEvent.KEY_DOWN , onKeyDownHandler );
			}
			
			private function onKeyDownHandler( e:KeyboardEvent):void
			{
				if(currentRoad)
				{
					currentRoad.x = currentRoad.x>> 0 ;
					currentRoad.y = currentRoad.y>> 0 ;
					switch(e.keyCode)
					{
						case Keyboard.A:
							currentRoad.x--;
							txtOffsetX.text = (currentRoad.x-currentRoad.rightX) +"";
							txtOffsetY.text = (currentRoad.y-currentRoad.rightY) +"";
							break ; 
						case Keyboard.D:
							currentRoad.x++;
							txtOffsetX.text = (currentRoad.x-currentRoad.rightX) +"";
							txtOffsetY.text = (currentRoad.y-currentRoad.rightY) +"";
							break ; 
						case Keyboard.W:
							currentRoad.y--;
							txtOffsetX.text = (currentRoad.x-currentRoad.rightX) +"";
							txtOffsetY.text = (currentRoad.y-currentRoad.rightY) +"";
							break ; 
						case Keyboard.S:
							currentRoad.y++;
							txtOffsetX.text = (currentRoad.x-currentRoad.rightX) +"";
							txtOffsetY.text = (currentRoad.y-currentRoad.rightY) +"";
							break ; 
					}
				}
			}
			
			
			private function onMouseHandler( e:MouseEvent ):void
			{
				if(e.target is RoadComponent)
				{
					currentRoad = e.target as RoadComponent ;
					switch( e.type )
					{
						case MouseEvent.MOUSE_DOWN:
							container.addEventListener( MouseEvent.MOUSE_UP , onMouseHandler );
							container.addEventListener( MouseEvent.MOUSE_MOVE , onMouseHandler );
							currentRoad.startDrag();
							break ;
						case MouseEvent.MOUSE_MOVE:
							if(e.buttonDown){
								currentRoad.x = currentRoad.x>>0 ;
								currentRoad.y= currentRoad.y>>0 ;
								txtOffsetX.text = (currentRoad.x-currentRoad.rightX) +"";
								txtOffsetY.text = (currentRoad.y-currentRoad.rightY) +"";
							}
							break ;
						default:
							container.removeEventListener( MouseEvent.MOUSE_UP , onMouseHandler );
							container.removeEventListener( MouseEvent.MOUSE_MOVE , onMouseHandler );
							currentRoad.stopDrag();
							break ;
					}
				}
			}
			
			
			
			
			
			
			
			private var file:File ;
			
			//直接拖放
			protected function container_nativeDragEnterHandler(event:NativeDragEvent):void
			{
				NativeDragManager.dropAction = NativeDragActions.COPY ; 
				NativeDragManager.acceptDragDrop(event.target as InteractiveObject);
			}
			
			protected function container_nativeDragDropHandler(event:NativeDragEvent):void
			{
				file =  event.clipboard.getData( event.clipboard.formats[0])[0] as File;
				readFile(file);
				lblName.text = file.name ;
			}
			private function readFile(file:File):void
			{
				clear_clickHandler(null);
				var ext:String= file.extension.toLowerCase() ;
				if(ext=="rd"){
					RoadFileUtil.readRoad( file , container );
					return ;
				}
				else if(ext!="png") return ;
				
				var url:String = file.url.substring(0, file.url.lastIndexOf("/")+1 );
				var alias:String = file.name ;
				if(file.name.indexOf(".")>-1){
					alias = file.name.substring( 0,file.name.lastIndexOf(".") );
				}
				if(alias.indexOf("_")>-1){
					alias = alias.substring( 0,alias.indexOf("_") );
				}
				if(url && alias){
					var len:int = directions.length;
					var road:RoadComponent ;
					for( var i:int = 0 ; i<len ; ++i )
					{
						road = container.getChildAt(i) as RoadComponent;
						if(road){
							road.loadRoad( url+alias+directions[i]+".png");
						}
					}
				}
			}
			
			
			/*清空，重置  */
			protected function clear_clickHandler(event:MouseEvent):void
			{
				currentRoad = null ;
				lblName.text = "";
				var road:RoadComponent; 
				for( var i:int = 0 ; i<container.numChildren ; ++i){
					if( container.getChildAt(i) is RoadComponent )
					{
						road = container.getChildAt(i) as RoadComponent ;
						road.clear() ;
					}
				}
			}
			
			/*显示demo  */
			private function demo_clickHandler(event:MouseEvent):void
			{
				clear_clickHandler(null);
				var file:File = new File( File.applicationDirectory.nativePath+"/asserts/Maple Leaves Road.rd");
				if(file.exists){
					this.readFile( file);
					lblName.text = file.name ;
				}
			}
			
			//===========设置偏移值===================
			private function setRoadOffset():void
			{
				var ox:String = StringUtil.trim(txtOffsetX.text);
				var oy:String = StringUtil.trim(txtOffsetY.text);
				if(currentRoad && ox && oy )
				{
					currentRoad.x = currentRoad.rightX + int(ox);
					currentRoad.y = currentRoad.rightY + int(oy);
				}
			}
			
			private function setAllOffset():void
			{
				var ox:String = StringUtil.trim(txtOffsetX.text);
				var oy:String = StringUtil.trim(txtOffsetY.text);
				if(ox && oy)
				{
					var len:int = directions.length;
					var road:RoadComponent ;
					for( var i:int = 0 ; i<len ; ++i )
					{
						road = container.getChildAt(i) as RoadComponent;
						if(road){
							road.x = road.rightX + int(ox);
							road.y = road.rightY + int(oy);
						}
					}
				}
			}
				
			
			//=============查看路世界==================
			private function viewRoadsWorld():void
			{
				var len:int = directions.length;
				var road:RoadComponent ;
				var bmd:BitmapData ;
				var roadResVO:RoadResVO =new RoadResVO();
				for( var i:int = 0 ; i<len ; ++i )
				{
					road = container.getChildAt(i) as RoadComponent;
					if(road){
						if(road.bmd){
							roadResVO.bmds[ lblName.text+directions[i] ] = road.bmd ;
							bmd = road.bmd;
						}else{
							roadResVO.bmds[ lblName.text+directions[i] ] = bmd ;
						}
						roadResVO.offsetXs[ lblName.text+directions[i] ] = road.x-road.rightX ;
						roadResVO.offsetYs[ lblName.text+directions[i] ] = road.y-road.rightY ;
					}
				}
				if(bmd)
				{
					var roadPop:RoadWorldPopUp = new RoadWorldPopUp();
					PopUpManager.addPopUp( roadPop , this , true );
					PopUpManager.centerPopUp( roadPop);
					roadPop.show( lblName.text ,  roadResVO );
				}
			}
			
			private function saveRoads():void
			{
				if( file && file.extension=="rd"){
					RoadFileUtil.saveBuilding( file , container);
				}else{
					RoadFileUtil.saveAsBuilding(container);
				}
			}
		]]>
	</fx:Script>
	<s:BorderContainer width="100%" height="100%" backgroundColor="#333333" borderColor="#000000"
					   nativeDragEnter="container_nativeDragEnterHandler(event)" nativeDragDrop="container_nativeDragDropHandler(event)">
		<mx:UIComponent id="container" left="100" top="100" mouseEnabled="false"/>
		<mx:UIComponent id="bg" left="100" top="100" mouseChildren="false" mouseEnabled="false" alpha="0.5"/>
	</s:BorderContainer>
	<s:BorderContainer width="200" height="100%" backgroundColor="#E7E7E7" borderColor="#F7F7F7">
		<s:Label id="lblName" left="6" top="10" text="新文件"/>
		<mx:HRule y="34" width="96%" horizontalCenter="0"/>
		<s:Button left="10" bottom="10" width="106" height="60" label="保存文件"
				  click="saveRoads()"/>
		<s:Button left="115" bottom="79" width="70" height="30" label="重置"
				  click="clear_clickHandler(event)"/>
		<s:Button left="18" bottom="78" width="70" height="30" label="Demo"
				  click="demo_clickHandler(event)"/>
		<s:Label x="10" y="72" text="偏移X"/>
		<s:Label x="10" y="102" text="偏移Y"/>
		<s:TextInput id="txtOffsetX" x="74" y="66" width="98"/>
		<s:TextInput id="txtOffsetY" x="74" y="98" width="98"/>
		<s:Button x="9" y="130" width="82" height="30" label="设置当前" click="setRoadOffset()"/>
		<s:Button x="108" y="130" width="82" height="30" label="设置全部" click="setAllOffset()"/>
		<s:Button x="16" y="212" width="167" height="40" label="在新窗口查看效果" click="viewRoadsWorld()"/>
		<s:Button right="4" bottom="24" label="另存为.." click="RoadFileUtil.saveAsBuilding(container);"/>
	</s:BorderContainer>
</s:Group>
