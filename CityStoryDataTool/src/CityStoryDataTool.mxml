<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" minWidth="400" minHeight="400"
					   xmlns:s="library://ns.adobe.com/flex/spark" width="400" height="500" showStatusBar="false"
					   xmlns:mx="library://ns.adobe.com/flex/mx" creationComplete="init()">
	
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			
			private var shopBaseBuildingHash:Dictionary ;
			private var shopBaseBuildings:Vector.<BaseBuildingVO>;
			private var expands:Vector.<ExpandVO> ;
			private var levelHash:Dictionary ;
			private var compHash:Dictionary ;
			private var quests:Vector.<QuestVO> ;
			private var iaps:Vector.<IapVO> ;
			
			private var file:File ;
			
			private function init():void
			{
				registerClassAlias("BaseBuildingVO" , BaseBuildingVO ) ;
				registerClassAlias("ProductVO" , ProductVO ) ;
				registerClassAlias("ExpandVO" , ExpandVO ) ;
				registerClassAlias("LevelVO" , LevelVO ) ;
				registerClassAlias("ComponentVO" , ComponentVO ) ;
				registerClassAlias("QuestVO" , QuestVO ) ;
				registerClassAlias("QuestTaskVO" , QuestTaskVO ) ;
				registerClassAlias("IapVO" , IapVO ) ;
			}
			
			private function selectBBV():void
			{
				file = new File();
				file.addEventListener(Event.SELECT , onSelectedBBVFile );
				file.browseForOpen("选择建筑配置文件" , [ new FileFilter("建筑配置文件(XML)","*.xml;*.XML")] );
			}
			
			private function onSelectedBBVFile(e:Event ):void
			{
				file.removeEventListener(Event.SELECT , onSelectedBBVFile );
				txtBBV.text = file.name ;
				
				var stream:FileStream = new FileStream();
				stream.open( file,FileMode.READ );
				var bytes:ByteArray = new ByteArray();
				stream.readBytes( bytes);
				bytes.position =0  ;
				var config:XML = XML( bytes.toString());
				shopBaseBuildingHash = new Dictionary();
				shopBaseBuildings = new Vector.<BaseBuildingVO>();
				if( config)
				{
					var len:int = config.children().length();
					var item:* ;
					for( var i:int = 0 ; i<len ; ++i )
					{
						var baseVO:BaseBuildingVO = new BaseBuildingVO();
						item = config.children()[i];
						if(item.children().length()>0)
						{
							parseBaseProduct( item.children() , baseVO );
						}
						var attNamesList:XMLList = item.@*;
						for (var j:int = 0; j < attNamesList.length(); j++)
						{ 
							var key:String = attNamesList[j].name() ;
							if( baseVO.hasOwnProperty(key)){
								switch(typeof  baseVO[key])
								{
									case "string":
										baseVO[key] = String( attNamesList[j] ).replace( /&amp;/g ,"&") ;
										break ;
									case "int":
										baseVO[key] = String( attNamesList[j] ) ;
										break ;
									case "number":
										baseVO[key] = Number( attNamesList[j] ) ;
										break;
								}
								
							}
						} 
						shopBaseBuildingHash[baseVO.name] = baseVO ;
						shopBaseBuildings.push( baseVO );
					}
				}
				else
				{
					trace("没有Shop数据");
				}
			}
			
			private function parseBaseProduct( products:* , baseVO:BaseBuildingVO ):void
			{
				var len:int = products.length();
				var item:* ;
				baseVO.products  = new Vector.<ProductVO>( len , true);
				for( var i:int = 0 ; i<len ; ++i )
				{
					var pvo:ProductVO = new ProductVO();
					baseVO.products[i] = pvo ;
					item = products[i];
					var attNamesList:XMLList = item.@*;
					for (var j:int = 0; j < attNamesList.length(); j++)
					{ 
						var key:String = String( attNamesList[j].name()) ;
						if( pvo.hasOwnProperty(key)){
							switch(typeof  pvo[key])
							{
								case "string":
									pvo[key] = String( attNamesList[j] ).replace( /&amp;/g ,"&") ;
									break ;
								case "int":
									pvo[key] = String( attNamesList[j] ) ;
									break ;
								case "number":
									pvo[key] = Number( attNamesList[j] ) ;
									break;
							}
							
						}
					} 
				}
			}
					
			
			
			
			private function selectExpand():void{
				file = new File();
				file.addEventListener(Event.SELECT , onSelectedExpandFile );
				file.browseForOpen("选择扩地配置文件" , [ new FileFilter("扩地配置文件(XML)","*.xml;*.XML")] );
			}
			private function onSelectedExpandFile(e:Event):void{
				file.removeEventListener(Event.SELECT , onSelectedExpandFile );
				txtExpand.text = file.name ;
				expands = new Vector.<ExpandVO>();
				
				var stream:FileStream = new FileStream();
				stream.open( file,FileMode.READ );
				var bytes:ByteArray = new ByteArray();
				stream.readBytes( bytes);
				bytes.position =0  ;
				var config:XML = XML( bytes.toString());
				if( config)
				{
					var len:int = config.children().length();
					var item:* ;
					for( var i:int = 0 ; i<len ; ++i )
					{
						var expandVO:ExpandVO = new ExpandVO();
						item = config.children()[i];
						var attNamesList:XMLList = item.@*;
						for (var j:int = 0; j < attNamesList.length(); j++)
						{ 
							var key:String = attNamesList[j].name() ;
							if( expandVO.hasOwnProperty(key)){
								switch(typeof  expandVO[key])
								{
									case "string":
										expandVO[key] = String( attNamesList[j] ).replace( /&amp;/g ,"&") ;
										break ;
									case "int":
										expandVO[key] = String( attNamesList[j] ) ;
										break ;
									case "number":
										expandVO[key] = Number( attNamesList[j] );
										break;
								}
								
							}
						} 
						expands.push( expandVO );
					}
				}
				else
				{
					trace("没有扩地数据");
				}
			}
			
			
			
			
			
			private function selectLevel():void{
				file = new File();
				file.addEventListener(Event.SELECT , onSelectedLevelFile );
				file.browseForOpen("选择升级配置文件" , [ new FileFilter("升级配置文件(XML)","*.xml;*.XML")] );
			}
			private function onSelectedLevelFile(e:Event):void{
				file.removeEventListener(Event.SELECT , onSelectedLevelFile );
				txtLevel.text = file.name ;
				levelHash =new Dictionary();
				
				var stream:FileStream = new FileStream();
				stream.open( file,FileMode.READ );
				var bytes:ByteArray = new ByteArray();
				stream.readBytes( bytes);
				bytes.position =0  ;
				var config:XML = XML( bytes.toString());
				if( config)
				{
					var len:int = config.children().length();
					var item:* ;
					for( var i:int = 0 ; i<len ; ++i )
					{
						var level:LevelVO = new LevelVO();
						item = config.children()[i];
						var attNamesList:XMLList = item.@*;
						for (var j:int = 0; j < attNamesList.length(); j++)
						{ 
							var key:String = attNamesList[j].name() ;
							if( level.hasOwnProperty(key)){
								switch(typeof  level[key])
								{
									case "string":
										level[key] = String( attNamesList[j] ).replace( /&amp;/g ,"&") ;
										break ;
									case "int":
										level[key] = String( attNamesList[j] ) ;
										break ;
									case "number":
										level[key] = Number( attNamesList[j] ) ;
										break;
								}
								
							}
						} 
						levelHash[level.level] = level ;
					}
				}
				else
				{
					trace("没有玩家升级数据");
				}
			}
			
			
			
			private function selectComp():void
			{
				file = new File();
				file.addEventListener(Event.SELECT , onSelectedCompFile );
				file.browseForOpen("选择Component配置文件" , [ new FileFilter("Component配置文件(XML)","*.xml;*.XML")] );
			}
			private function onSelectedCompFile(e:Event):void{
				file.removeEventListener(Event.SELECT , onSelectedCompFile );
				txtComp.text = file.name ;
				compHash =new Dictionary();
				
				var stream:FileStream = new FileStream();
				stream.open( file,FileMode.READ );
				var bytes:ByteArray = new ByteArray();
				stream.readBytes( bytes);
				bytes.position =0  ;
				var config:XML = XML( bytes.toString());
				if( config)
				{
					var len:int = config.children().length();
					var item:* ;
					for( var i:int = 0 ; i<len ; ++i )
					{
						var compVO:ComponentVO = new ComponentVO();
						item = config.children()[i];
						var attNamesList:XMLList = item.@*;
						for (var j:int = 0; j < attNamesList.length(); j++)
						{ 
							var key:String = attNamesList[j].name() ;
							if( compVO.hasOwnProperty(key)){
								switch(typeof  compVO[key])
								{
									case "string":
										compVO[key] = String( attNamesList[j] ).replace( /&amp;/g ,"&") ;
										break ;
									case "int":
										compVO[key] = String( attNamesList[j] );
										break ;
									case "number":
										compVO[key] = Number( attNamesList[j] ) ;
										break;
								}
								
							}
						} 
						compHash[compVO.name] = compVO ;
					}
				}
				else
				{
					trace("没有Component数据");
				}
			}
			
			
			
			
			
			
			private function selectQuest():void{
				file = new File();
				file.addEventListener(Event.SELECT , onSelectedQuestFile );
				file.browseForOpen("选择任务配置文件" , [ new FileFilter("任务配置文件(XML)","*.xml;*.XML")] );
			}
			private function onSelectedQuestFile(e:Event):void
			{
				file.removeEventListener(Event.SELECT , onSelectedQuestFile );
				txtQuest.text = file.name ;
				quests = new Vector.<QuestVO>();
				var stream:FileStream = new FileStream();
				stream.open( file,FileMode.READ );
				var bytes:ByteArray = new ByteArray();
				stream.readBytes( bytes);
				bytes.position =0  ;
				var config:XML = XML( bytes.toString());
				if( config)
				{
					var len:int = config.children().length();
					var item:* ;
					for( var i:int = 0 ; i<len ; ++i )
					{
						var questVO:QuestVO = new QuestVO();
						item = config.children()[i];
						if(item.children().length()>0)
						{
							parseTasks( item.children() , questVO );
						}
						var attNamesList:XMLList = item.@*;
						for (var j:int = 0; j < attNamesList.length(); j++)
						{ 
							var key:String = attNamesList[j].name() ;
							if( questVO.hasOwnProperty(key)){
								switch(typeof  questVO[key])
								{
									case "string":
										questVO[key] = String( attNamesList[j] ).replace( /&amp;/g ,"&") ;
										break ;
									case "int":
										questVO[key] = String( attNamesList[j] ) ;
										break ;
									case "number":
										questVO[key] = Number( attNamesList[j] ) ;
										break;
								}
								
							}
						} 
						quests.push( questVO);
					}
				}
				else
				{
					trace("没有任务数据");
				}
			}
			private function parseTasks(tasks:* , questVO:QuestVO ):void
			{
				var len:int = tasks.length();
				var item:* ;
				questVO.tasks  = new Vector.<QuestTaskVO>( len , true);
				for( var i:int = 0 ; i<len ; ++i )
				{
					var taskVO:QuestTaskVO = new QuestTaskVO();
					questVO.tasks[i] = taskVO ;
					item = tasks[i];
					var attNamesList:XMLList = item.@*;
					for (var j:int = 0; j < attNamesList.length(); j++)
					{ 
						var key:String = String( attNamesList[j].name()) ;
						if( taskVO.hasOwnProperty(key)){
							switch(typeof  taskVO[key])
							{
								case "string":
									taskVO[key] = String( attNamesList[j] ).replace( /&amp;/g ,"&");
									break ;
								case "int":
									taskVO[key] = String( attNamesList[j] );
									break ;
								case "number":
									taskVO[key] = Number( attNamesList[j] );
									break;
							}
							
						}
					} 
				}
			}
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			private function selectIap():void{
				file = new File();
				file.addEventListener(Event.SELECT , onSelectedIapFile );
				file.browseForOpen("选择IAP配置文件" , [ new FileFilter("IAP配置文件(XML)","*.xml;*.XML")] );
			}
			private function onSelectedIapFile(e:Event):void
			{
				file.removeEventListener(Event.SELECT , onSelectedIapFile );
				txtIap.text = file.name ;
				iaps = new Vector.<IapVO>();
				
				var stream:FileStream = new FileStream();
				stream.open( file,FileMode.READ );
				var bytes:ByteArray = new ByteArray();
				stream.readBytes( bytes);
				bytes.position =0  ;
				var config:XML = XML( bytes.toString());
				if( config)
				{
					var len:int = config.children().length();
					var item:* ;
					for( var i:int = 0 ; i<len ; ++i )
					{
						var iapVO:IapVO = new IapVO();
						item = config.children()[i];
						var attNamesList:XMLList = item.@*;
						for (var j:int = 0; j < attNamesList.length(); j++)
						{ 
							var key:String = attNamesList[j].name() ;
							if( iapVO.hasOwnProperty(key)){
								switch(typeof  iapVO[key])
								{
									case "string":
										iapVO[key] = String( attNamesList[j] ).replace( /&amp;/g ,"&") ;
										break ;
									case "int":
										iapVO[key] = String( attNamesList[j] );
										break ;
									case "number":
										iapVO[key] = Number( attNamesList[j] ) ;
										break;
								}
								
							}
						} 
						iaps.push(iapVO);
					}
				}
				else
				{
					trace("没有IAP数据");
				}
			}
			
			
			
			
			
			
			
			
			
			
			
			
			
			protected function export_clickHandler(event:MouseEvent):void
			{
				file = new File();
				file.addEventListener(Event.SELECT , onSelectedSaveFile);
				file.browseForSave("保存");
			}
			private function onSelectedSaveFile( e:Event ):void
			{
				file.removeEventListener(Event.SELECT , onSelectedSaveFile);
				var stream:FileStream = new FileStream();
				stream.open( file , FileMode.WRITE );
				
				var bytes:ByteArray = new ByteArray();
				bytes.writeObject( shopBaseBuildingHash );
				bytes.writeObject( shopBaseBuildings );
				bytes.writeObject( expands );
				bytes.writeObject( levelHash );
				bytes.writeObject( compHash );
				bytes.writeObject( quests );
				bytes.writeObject( iaps );
				
				stream.writeBytes( bytes );
				stream.close();
				Alert.show("导出成功！");
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:Label x="19" y="23" text="基础建筑配置"/>
	<s:Label x="20" y="86" text="扩地配置"/>
	<s:Label x="20" y="146" text="玩家升级配置"/>
	<s:TextInput id="txtBBV" x="19" y="42" width="288" enabled="false"/>
	<s:Button x="316" y="452" width="74" height="38" label="生成" click="export_clickHandler(event)"/>
	<s:Button x="320" y="42" label="选择" click="selectBBV()"/>
	<s:TextInput id="txtExpand" x="19" y="104" width="288" enabled="false"/>
	<s:TextInput id="txtLevel" x="19" y="164" width="288" enabled="false"/>
	<s:Button x="320" y="104" label="选择" click="selectExpand()"/>
	<s:Button x="320" y="164" label="选择" click="selectLevel()"/>
	<s:Label x="20" y="206" text="Component配置"/>
	<s:TextInput id="txtComp" x="19" y="224" width="288" enabled="false"/>
	<s:Button x="320" y="224" label="选择" click="selectComp()"/>
	<s:Label x="20" y="266" text="任务配置"/>
	<s:TextInput id="txtQuest" x="19" y="284" width="288" enabled="false"/>
	<s:Label x="20" y="326" text="IAP配置"/>
	<s:TextInput id="txtIap" x="19" y="344" width="288" enabled="false"/>
	<s:Button x="320" y="284" label="选择" click="selectQuest()"/>
	<s:Button x="320" y="344" label="选择" click="selectIap()"/>
</s:WindowedApplication>
